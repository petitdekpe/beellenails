{% extends 'base.html.twig' %}

{% block title %}Paiement en cours - BeElleNails{% endblock %}

{% block body %}
<div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 pt-32 sm:px-6 lg:px-8">
	<div class="sm:mx-auto sm:w-full sm:max-w-md">
		<div class="text-center">
			<img src="{{ asset('assets/logooff.png') }}" alt="BeElleNails" class="mx-auto h-16 w-auto">
			<h2 class="mt-6 text-3xl font-extrabold text-gray-900">Paiement en cours</h2>
			<p class="mt-2 text-sm text-gray-600">Veuillez patienter pendant le traitement de votre paiement</p>
		</div>
	</div>

	<div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
		<div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
			
			<!-- Loader anim√© -->
			<div class="text-center mb-6">
				<div id="loader" class="inline-block">
					<div class="animate-spin rounded-full h-16 w-16 border-b-2 border-pink-600 mx-auto"></div>
					<p class="mt-4 text-sm text-gray-600">V√©rification du statut...</p>
				</div>
			</div>

			<!-- Instructions -->
			<div class="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
				<div class="flex">
					<div class="flex-shrink-0">
						<svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
						</svg>
					</div>
					<div class="ml-3">
						<h3 class="text-sm font-medium text-blue-800">
							Instructions de paiement
						</h3>
						<div class="mt-2 text-sm text-blue-700">
							<ul class="list-disc pl-5 space-y-1">
								<li>V√©rifiez votre t√©l√©phone pour la demande de paiement</li>
								<li>Entrez votre code PIN Mobile Money</li>
								<li>Confirmez le paiement sur votre t√©l√©phone</li>
								<li>Cette page se met √† jour automatiquement</li>
								<li>Le paiement sera annul√© apr√®s 10 minutes</li>
							</ul>
						</div>
					</div>
				</div>
			</div>

			<!-- √âtapes de progression -->
			<div class="mb-6">
				<div class="flex items-center justify-between mb-4">
					<div class="flex items-center">
						<div id="step-1-indicator" class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white text-sm font-medium">‚úì</div>
						<div class="ml-3">
							<p class="text-sm font-medium text-gray-900">Initialisation</p>
							<p class="text-xs text-gray-500">Demande de paiement envoy√©e</p>
						</div>
					</div>
					<div class="text-xs text-green-600 font-medium" id="step-1-time">Termin√©</div>
				</div>

				<div class="flex items-center justify-between mb-4">
					<div class="flex items-center">
						<div id="step-2-indicator" class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium animate-pulse">2</div>
						<div class="ml-3">
							<p class="text-sm font-medium text-gray-900">Attente webhook</p>
							<p class="text-xs text-gray-500">V√©rification base de donn√©es</p>
						</div>
					</div>
					<div class="text-xs text-blue-600 font-medium" id="step-2-time">En cours...</div>
				</div>

				<div class="flex items-center justify-between mb-4">
					<div class="flex items-center">
						<div id="step-3-indicator" class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-gray-500 text-sm font-medium">3</div>
						<div class="ml-3">
							<p class="text-sm font-medium text-gray-500">V√©rification directe</p>
							<p class="text-xs text-gray-400">API Feexpay (apr√®s 30s)</p>
						</div>
					</div>
					<div class="text-xs text-gray-400" id="step-3-time">En attente</div>
				</div>
			</div>

			<!-- Statut et timer -->
			<div class="text-center mb-6">
				<div class="bg-gray-100 rounded-lg p-4">
					<p class="text-sm font-medium text-gray-900">Statut: <span id="payment-status" class="text-blue-600">En attente</span></p>
					<p class="text-xs text-gray-500 mt-1">Temps restant: <span id="countdown" class="font-mono">10:00</span></p>
					<p class="text-xs text-gray-400 mt-1">Phase: <span id="current-phase" class="font-medium">Attente webhook</span></p>
					<p class="text-xs text-gray-400 mt-1" id="source-indicator">Source: database</p>
					<p class="text-xs text-gray-400 mt-2">R√©f√©rence: {{ reference }}</p>
				</div>
			</div>

			<!-- Historique des v√©rifications -->
			<div class="mb-6">
				<div class="bg-gray-50 rounded-lg p-3">
					<h4 class="text-sm font-medium text-gray-900 mb-2">Historique des v√©rifications</h4>
					<div id="verification-history" class="space-y-1 max-h-32 overflow-y-auto">
						<div class="text-xs text-gray-600">üîç D√©marrage de la surveillance...</div>
					</div>
				</div>
			</div>

			<!-- Actions -->
			<div class="space-y-3">
				<button onclick="checkPaymentStatus()" class="w-full bg-pink-600 hover:bg-pink-700 text-white font-medium py-2 px-4 rounded-md transition duration-150">
					V√©rifier maintenant
				</button>
				<a href="https://wa.me/22997853512" target="_blank" class="w-full bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-md text-center block transition duration-150">
					Besoin d'aide ? üí¨
				</a>
			</div>

		</div>
	</div>
</div>

<script>
const REFERENCE = '{{ reference }}';

// Configuration des timeouts optimis√©s pour Mobile Money
const TIMEOUT_DURATION = 600000;  // 10 minutes - temps r√©aliste pour Mobile Money
const POLL_INTERVAL = 2000;       // V√©rifier toutes les 2 secondes en mode DB
const HYBRID_POLL_INTERVAL = 5000; // V√©rifier toutes les 5 secondes en mode hybride
const FALLBACK_THRESHOLD = 30000;  // Basculer vers Feexpay direct apr√®s 30s
const AUTO_CANCEL_TIMEOUT = 600000; // Annuler automatiquement apr√®s 10 minutes

// Variables d'√©tat
let startTime = Date.now();
let pollInterval;
let countdownInterval;
let isHybridMode = false;
let lastStatusCheck = null;
let consecutiveErrors = 0;
const MAX_ERRORS = 5;
let checkCount = 0;
let verificationHistory = [];

// D√©marre le polling et le countdown au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
	startPolling();
	startCountdown();
	updateStatusIndicator('üîç V√©rification en base de donn√©es...');
	addToHistory('üöÄ Surveillance d√©marr√©e');
	updatePhase('Attente webhook');
});

function startPolling() {
	pollInterval = setInterval(checkPaymentStatus, POLL_INTERVAL);
	// V√©rification imm√©diate
	checkPaymentStatus();
}

function startCountdown() {
	countdownInterval = setInterval(updateCountdown, 1000);
}

function updateCountdown() {
	const elapsed = Date.now() - startTime;
	const remaining = Math.max(0, TIMEOUT_DURATION - elapsed);
	
	// V√©rifier si on doit basculer en mode hybride
	if (!isHybridMode && elapsed > FALLBACK_THRESHOLD) {
		switchToHybridMode();
	}
	
	// Annulation automatique apr√®s timeout
	if (remaining === 0) {
		clearIntervals();
		cancelPayment();
		return;
	}
	
	// Mise √† jour du compteur visuel
	const minutes = Math.floor(remaining / 60000);
	const seconds = Math.floor((remaining % 60000) / 1000);
	document.getElementById('countdown').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

function switchToHybridMode() {
	if (isHybridMode) return;

	isHybridMode = true;
	updateStatusIndicator('üîÑ V√©rification directe chez Feexpay...');

	// Mettre √† jour les √©tapes visuelles
	updateStepStatus(2, 'completed', '‚úì Termin√©');
	updateStepStatus(3, 'active', 'En cours...');
	updatePhase('V√©rification directe');
	addToHistory('üîÑ Basculement vers v√©rification directe Feexpay');

	// Changer l'intervalle de polling
	clearInterval(pollInterval);
	pollInterval = setInterval(checkPaymentStatus, HYBRID_POLL_INTERVAL);

	// Changer la couleur du loader pour indiquer le changement
	const loader = document.querySelector('.animate-spin');
	if (loader) {
		loader.classList.remove('border-pink-600');
		loader.classList.add('border-orange-500');
	}
}

async function checkPaymentStatus() {
	try {
		checkCount++;
		let endpoint, description;

		if (isHybridMode) {
			endpoint = `/api/payment/feexpay/verify/${REFERENCE}`;
			description = 'üîÑ V√©rification directe Feexpay...';
		} else {
			endpoint = `/api/payment/feexpay/status/${REFERENCE}`;
			description = 'üîç V√©rification en base de donn√©es...';
		}

		updateStatusIndicator(description);
		addToHistory(`${isHybridMode ? 'üîÑ' : 'üîç'} V√©rification #${checkCount} (${isHybridMode ? 'API' : 'BDD'})`);

		const response = await fetch(endpoint, {
			timeout: 10000
		});

		if (!response.ok) {
			throw new Error(`HTTP ${response.status}: ${response.statusText}`);
		}

		const data = await response.json();

		// R√©initialiser le compteur d'erreurs en cas de succ√®s
		consecutiveErrors = 0;

		lastStatusCheck = new Date().toLocaleTimeString();
		updateStatusDisplay(data.status, data.source);

		// Ajouter √† l'historique avec plus de d√©tails
		const elapsed = Math.floor((Date.now() - startTime) / 1000);
		addToHistory(`üìä ${lastStatusCheck} - Statut: ${data.status} (${elapsed}s)`);

		// Traitement selon le statut
		switch(data.status) {
			case 'successful':
				updateStepStatus(isHybridMode ? 3 : 2, 'completed', '‚úì Paiement confirm√©!');
				addToHistory('‚úÖ Paiement r√©ussi - Redirection...');
				clearIntervals();
				showSuccessMessage();
				setTimeout(() => redirectToSuccess(), 2000);
				break;
			case 'failed':
			case 'canceled':
				updateStepStatus(isHybridMode ? 3 : 2, 'failed', '‚ùå √âchec');
				addToHistory(`‚ùå Paiement ${data.status} - Redirection...`);
				clearIntervals();
				showFailureMessage();
				setTimeout(() => redirectToFailure(), 2000);
				break;
		}

	} catch (error) {
		consecutiveErrors++;
		addToHistory(`‚ö†Ô∏è Erreur #${consecutiveErrors}: ${error.message}`);

		if (consecutiveErrors >= MAX_ERRORS) {
			updateStatusIndicator('‚ùå Trop d\'erreurs de connexion. Annulation...');
			addToHistory('‚ùå Trop d\'erreurs - Abandon du paiement');
			clearIntervals();
			setTimeout(() => redirectToFailure(), 3000);
			return;
		}

		updateStatusIndicator(`‚ö†Ô∏è Erreur connexion (${consecutiveErrors}/${MAX_ERRORS}). Nouvelle tentative...`);
	}
}

function updateStatusDisplay(status, source = 'database') {
	const statusElement = document.getElementById('payment-status');
	const statusMap = {
		'pending': { text: 'En attente de confirmation', color: 'text-blue-600' },
		'successful': { text: 'Paiement r√©ussi', color: 'text-green-600' },
		'failed': { text: 'Paiement √©chou√©', color: 'text-red-600' },
		'canceled': { text: 'Paiement annul√©', color: 'text-red-600' }
	};
	
	const statusInfo = statusMap[status] || { text: status, color: 'text-gray-600' };
	statusElement.textContent = statusInfo.text;
	statusElement.className = statusInfo.color;
	
	// Afficher la source et derni√®re v√©rification
	const sourceIndicator = document.getElementById('source-indicator');
	if (sourceIndicator) {
		const sourceText = source === 'database' ? 'Base de donn√©es' : 
					     source === 'feexpay_direct' ? 'Feexpay (direct)' : 
					     'Fallback BDD';
		sourceIndicator.textContent = `Source: ${sourceText} (${lastStatusCheck})`;
	}
}

function updateStatusIndicator(message) {
	const loaderText = document.querySelector('#loader p');
	if (loaderText) {
		loaderText.textContent = message;
	}
}

function showSuccessMessage() {
	updateStatusIndicator('‚úÖ Paiement confirm√© ! Redirection vers la confirmation...');
	const loader = document.querySelector('.animate-spin');
	if (loader) {
		loader.classList.remove('animate-spin', 'border-pink-600', 'border-orange-500');
		loader.classList.add('border-green-500');
		loader.innerHTML = '<div class="text-green-500 text-3xl">‚úÖ</div>';
	}
}

function showFailureMessage() {
	updateStatusIndicator('‚ùå Paiement non confirm√©. Redirection...');
	const loader = document.querySelector('.animate-spin');
	if (loader) {
		loader.classList.remove('animate-spin', 'border-pink-600', 'border-orange-500');
		loader.classList.add('border-red-500');
		loader.innerHTML = '<div class="text-red-500 text-3xl">‚ùå</div>';
	}
}

function showCancelMessage() {
	updateStatusIndicator('‚è∞ Temps d\'attente d√©pass√©. Annulation du paiement...');
	const loader = document.querySelector('.animate-spin');
	if (loader) {
		loader.classList.remove('animate-spin', 'border-pink-600', 'border-orange-500');
		loader.classList.add('border-gray-500');
		loader.innerHTML = '<div class="text-gray-500 text-3xl">‚è∞</div>';
	}
}

async function cancelPayment() {
	showCancelMessage();
	addToHistory('‚è∞ Timeout atteint - Annulation automatique...');
	updateStepStatus(isHybridMode ? 3 : 2, 'failed', '‚è∞ Timeout');

	try {
		// Appeler l'API pour marquer le paiement comme annul√©
		const response = await fetch(`/api/payment/feexpay/cancel/${REFERENCE}`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			}
		});

		if (response.ok) {
			addToHistory('‚úÖ Paiement marqu√© comme annul√© en base');
		} else {
			addToHistory('‚ö†Ô∏è Impossible de marquer le paiement comme annul√©');
		}
	} catch (error) {
		addToHistory(`‚ùå Erreur lors de l'annulation: ${error.message}`);
	}

	// Redirection vers la page d'erreur apr√®s 3 secondes
	setTimeout(() => redirectToFailure(), 3000);
}

function clearIntervals() {
	if (pollInterval) clearInterval(pollInterval);
	if (countdownInterval) clearInterval(countdownInterval);
}

function redirectToSuccess() {
	window.location.href = `/rendezvous/payment/done/${REFERENCE}`;
}

function redirectToFailure() {
	window.location.href = `/rendezvous/payment/error/${REFERENCE}`;
}

// Nettoyage quand on quitte la page
window.addEventListener('beforeunload', clearIntervals);

// Nouvelles fonctions utilitaires pour le suivi visuel
function updatePhase(phaseName) {
	const element = document.getElementById('current-phase');
	if (element) {
		element.textContent = phaseName;
	}
}

function updateStepStatus(stepNumber, status, timeText) {
	const indicator = document.getElementById(`step-${stepNumber}-indicator`);
	const time = document.getElementById(`step-${stepNumber}-time`);

	if (!indicator || !time) return;

	// R√©initialiser les classes
	indicator.className = 'w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium';

	switch(status) {
		case 'active':
			indicator.classList.add('bg-blue-600', 'text-white', 'animate-pulse');
			indicator.textContent = stepNumber;
			time.className = 'text-xs text-blue-600 font-medium';
			break;
		case 'completed':
			indicator.classList.add('bg-green-600', 'text-white');
			indicator.textContent = '‚úì';
			time.className = 'text-xs text-green-600 font-medium';
			break;
		case 'failed':
			indicator.classList.add('bg-red-600', 'text-white');
			indicator.textContent = '‚ùå';
			time.className = 'text-xs text-red-600 font-medium';
			break;
		default:
			indicator.classList.add('bg-gray-300', 'text-gray-500');
			indicator.textContent = stepNumber;
			time.className = 'text-xs text-gray-400';
	}

	time.textContent = timeText;
}

function addToHistory(message) {
	const now = new Date().toLocaleTimeString();
	const historyElement = document.getElementById('verification-history');

	if (historyElement) {
		const entry = document.createElement('div');
		entry.className = 'text-xs text-gray-600';
		entry.textContent = `${now} - ${message}`;

		historyElement.appendChild(entry);

		// Garder seulement les 10 derni√®res entr√©es
		while (historyElement.children.length > 10) {
			historyElement.removeChild(historyElement.firstChild);
		}

		// Auto-scroll vers le bas
		historyElement.scrollTop = historyElement.scrollHeight;
	}
}

// Gestion de la perte de connexion r√©seau
window.addEventListener('online', function() {
	consecutiveErrors = 0;
	updateStatusIndicator('üîç Connexion r√©tablie. V√©rification...');
	addToHistory('üì° Connexion Internet r√©tablie');
});

window.addEventListener('offline', function() {
	updateStatusIndicator('üì° Connexion perdue. Attente de reconnexion...');
	addToHistory('üì° Connexion Internet perdue');
});
</script>

{% endblock %}
